@page "/Tasks"
@using REMS.Interfaces
@using REMS.Enititys
@inject IReportService ReportService
@inject IHttpContextAccessor HttpContextAccessor
@attribute [Authorize(Roles ="Manager,Admin1,User")]

<PageTitle>المهمات</PageTitle>
 @* <img src="logo1.png" alt="Alternate Text" style="width:600px; position:fixed; top:50%; left:50%; transform:translate(-50%, -50%); opacity: 1; z-index: -1; pointer-events: none;" />
 *@
<div >
    <div class="container mt-5 p-4 rounded shadow-lg" style="background: linear-gradient(135deg, #1e3c72, #2a5298); border-radius: 15px; color: white;">
        <h3 class="text-center mb-4" style="color: white; font-weight: bold;">
            <i class="fas fa-plus-circle" style="color: #ffffff;"></i> إضافة تقرير
        </h3>

        <EditForm Model="@report" OnValidSubmit="HandleValidSubmit" dir="rtl">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label style="color: white;">الاسم الكامل:</label>
               <h5>@User.FullName</h5>
           </div>

            <div class="form-group mb-3">
                <label style="color: white;">المحتوى:</label>
                <InputTextArea class="form-control shadow-sm" @bind-Value="report.Content" placeholder="أدخل محتوى التقرير" rows="4" style="border-radius: 10px;" />
            </div>

            <div class="form-group form-check mb-4">
                <InputCheckbox class="form-check-input" @bind-Value="report.IsDone" style="transform: scale(1.2);" />
                <label class="form-check-label" style="color: white;">تم الانتهاء</label>
            </div>

            <button type="submit" class="btn btn-primary btn-block" style="background-color: #3498db; border-color: #3498db; border-radius: 10px;">
                <i class="fas fa-paper-plane"></i> إضافة تقرير
            </button>
        </EditForm>

        @if (successMessage != null)
        {
            <div class="alert alert-success mt-3 fade show" role="alert" style="background-color: #2ecc71; color: white; border-radius: 10px;">
                <i class="fas fa-check-circle"></i> @successMessage
            </div>
        }
    </div>
</div>

<style>
    .watermark-container {
        position: relative;
        background-image: url('logo1.png');
        background-position: center;
        background-repeat: no-repeat;
        background-size: 600px 600px;
        opacity: 0.1;
    }
</style>

@code {
    private Report report = new Report();
    private string? successMessage;

    private async Task HandleValidSubmit()
    {
        report.FullName = User.FullName;
        await ReportService.AddReport(report);
        successMessage = "تم إضافة التقرير بنجاح!";
        report = new Report(); 
    }
    [Parameter]
    public int Id { get; set; }

    [Inject]
    public UserService UserRepo { get; set; }

    private string ErrorMessage { get; set; } = string.Empty;

    private User User { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            Id = LoggedUserId;
        }

        var result = await UserRepo.GetById(Id);
        if (result.IsFailure)
        {
            ErrorMessage = $"There is no user with Id {Id}.";
        }
        else
        {
            var cur = result.Value;
            if (LoggedUserId != cur.Id)
            {
                // No one has this permission yet
                ErrorMessage = "You do not have permission to view other users' profiles.";
            }
            else
            {
                User = cur;
            }
        }
    }

    private int LoggedUserId => Convert.ToInt32(HttpContextAccessor.HttpContext.User.Claims.FirstOrDefault(x => x.Type == "Id").Value);
}